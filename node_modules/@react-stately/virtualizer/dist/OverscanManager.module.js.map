{"mappings":"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","sources":["packages/@react-stately/virtualizer/src/OverscanManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n"],"names":[],"version":3,"file":"OverscanManager.module.js.map"}