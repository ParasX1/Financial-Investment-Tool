{"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;AAqCM,SAAS,0CAA4C,IAA+B;IACzF,IAAI,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qBAAO,EAAO,EAAE;IACtD,IAAI,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qBAAO,EAAE,IAAI,CAAA,GAAA,8BAAG;IACpD,IAAI,CAAC,aAAa,aAAa,GAAG,CAAA,GAAA,qBAAO,EAAE;IAC3C,IAAI,CAAC,aAAa,aAAa,GAAG,CAAA,GAAA,qBAAO,EAAE;IAC3C,IAAI,cAAc,CAAA,GAAA,oBAAM,EAAE,IAAM,IAAI,CAAA,GAAA,qCAAU,KAAc,EAAE;IAE9D,YAAY,QAAQ,GAAG;yBACrB;QACA,gBAAe,IAAI;YACjB,YAAY,WAAW,GAAG;YAC1B,KAAK,mBAAmB,CAAC;QAC3B;wBACA;QACA,YAAY,KAAK,UAAU;QAC3B,eAAe,KAAK,aAAa;QACjC,iBAAiB,IAAM,aAAa;QACpC,eAAe,IAAM,aAAa;QAClC,iBAAiB,KAAK,eAAe;IACvC;IAEA,YAAY,MAAM,GAAG,KAAK,MAAM;IAChC,YAAY,UAAU,GAAG,KAAK,UAAU;IACxC,YAAY,kBAAkB,GAAG,KAAK,kBAAkB;IAExD,CAAA,GAAA,qCAAc,EAAE;QACd,YAAY,WAAW;IACzB;IAEA,4CAA4C;IAC5C,CAAA,GAAA,sBAAQ,EAAE;QACR,OAAO,IAAM,YAAY,WAAW;IACtC,uDAAuD;IACvD,GAAG,EAAE;IAEL,IAAI,iBAAiB,CAAA,GAAA,wBAAU,EAAE,CAAC;QAChC,YAAY,WAAW,GAAG;IAC5B,GAAG;QAAC;KAAY;IAChB,IAAI,iBAAiB,CAAA,GAAA,wBAAU,EAAE;QAC/B,YAAY,cAAc;QAC1B,aAAa;IACf,GAAG;QAAC;KAAY;IAChB,IAAI,eAAe,CAAA,GAAA,wBAAU,EAAE;QAC7B,YAAY,YAAY;QACxB,aAAa;IACf,GAAG;QAAC;KAAY;IAEhB,IAAI,QAAQ,CAAA,GAAA,oBAAM,EAAE,IAAO,CAAA;yBACzB;0BACA;4BACA;yBACA;yBACA;yBACA;4BACA;0BACA;QACF,CAAA,GAAI;QACF;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,OAAO;AACT","sources":["packages/@react-stately/virtualizer/src/useVirtualizerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Key} from '@react-types/shared';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n"],"names":[],"version":3,"file":"useVirtualizerState.main.js.map"}